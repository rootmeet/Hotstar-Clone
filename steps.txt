#=============================================================================================================================================================================================
#[1]--Complete jenkins pipeline script
pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/rootmeet/Hotstar-Clone.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('SonarQube-Server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=HotstarClone-CICD \
                    -Dsonar.projectKey=HotstarClone-CICD'''
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'SonarQube-Token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('TRIVY FS SCAN') {
             steps {
                 sh "trivy fs . > trivyfs.txt"
             }
        }
        stage("Docker Build & Push"){
             steps{
                 script{
                   withDockerRegistry(credentialsId: 'dockerhub', toolName: 'docker'){   
                      sh "docker build -t hotstar-clone ."
                      sh "docker tag hotstar-clone sanjeevrisbud/hotstar-clone:latest "
                      sh "docker push sanjeevrisbud/hotstar-clone:latest "
                    }
                }
            }
        }
        stage("TRIVY Image Scan"){
            steps{
                sh "trivy image sanjeevrisbud/hotstar-clone:latest > trivyimage.txt" 
            }
        }
        stage('Deploy to Kubernets'){
            steps{
                script{
                    dir('K8S') {
                        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kubernetes', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                        sh 'kubectl delete --all pods'
                        sh 'kubectl apply -f hotstar-clone-deployment.yml'
                        sh 'kubectl apply -f hotstar-clone-service.yml'
                        }   
                    }
                }
            }
        }
    }
    post {
     always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
                "Build Number: ${env.BUILD_NUMBER}<br/>" +
                "URL: ${env.BUILD_URL}<br/>",
            to: 'rootmeet@gmail.com',                              
            attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        }
    }
}
#=============================================================================================================================================================================================
#[2]--Install Prometheus on EKS
$ helm repo add stable https://charts.helm.sh/stable          ///We need to add the Helm Stable Charts for our local client

$ helm repo add prometheus-community https://prometheus-community.github.io/helm-charts     ///Add Prometheus Helm repo

$ kubectl create namespace prometheus            ///Create Prometheus namespace

$ helm install stable prometheus-community/kube-prometheus-stack -n prometheus      ///Install Prometheus

$ kubectl get pods -n prometheus          ///To check whether Prometheus is installed

$ kubectl get svc -n prometheus           ///to check the services file (svc) of the Prometheus

##letâ€™s expose Prometheus to the external world using LoadBalancer
$ kubectl edit svc stable-kube-prometheus-sta-prometheus -n prometheus    ///type:LoadBalancer, change port & targetport to 9090, save and close

$ kubectl get svc -n prometheus    //copy dns name of LB and browse with 9090

#=============================================================================================================================================================================================
#[3]--Cleanup
$ kubectl delete --all pods -n prometheus                   //This command will delete all the pods in prometheus namespace
$ kubectl delete namespace prometheus
$ kubectl get all                                           //This command will show the all the deployments, pods & services in default namespace
$ kubectl delete deployment.apps/hotstar-clone     //delete deployment in your k8s cluster
$ kubectl delete service/hotstar-clone             //delete service for your deployment of k8s cluster
$ eksctl delete cluster rootmeet-cluster --region us-west-1     OR    eksctl delete cluster --region=us-west-1 --name=rootmeet-cluster      //This command will delete your EKS cluster
$ terraform destroy